   1               		.file	"main.c"
   2               	__SP_L__ = 0x3d
   3               	__SREG__ = 0x3f
   4               	__tmp_reg__ = 0
   5               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
 104               	.global	USART_Init
 106               	USART_Init:
 107               		.stabd	46,0,0
   1:src/main.c    **** #include <avr/io.h>
   2:src/main.c    **** #include <util/delay.h>
   3:src/main.c    **** #include <avr/interrupt.h>
   4:src/main.c    **** 
   5:src/main.c    **** #define BAUD 9600
   6:src/main.c    **** #define MYUBRR F_CPU/16/BAUD-1
   7:src/main.c    **** 
   8:src/main.c    **** volatile int state = 0;
   9:src/main.c    **** 
  10:src/main.c    **** volatile int connection=0;
  11:src/main.c    **** volatile int cmd_val=0;
  12:src/main.c    **** 
  13:src/main.c    **** void USART_Init(unsigned int ubrr)
  14:src/main.c    **** {
 109               	.LM0:
 110               	.LFBB1:
 111               	/* prologue: function */
 112               	/* frame size = 0 */
 113               	/* stack size = 0 */
 114               	.L__stack_usage = 0
  15:src/main.c    ****   /*Set baud rate */
  16:src/main.c    ****   UBRRH = (unsigned char)(ubrr>>8);
 116               	.LM1:
 117 0000 92B9      		out 0x2,r25
  17:src/main.c    ****   UBRRL = (unsigned char)ubrr;
 119               	.LM2:
 120 0002 89B9      		out 0x9,r24
  18:src/main.c    ****   /*Enable receiver and transmitter */
  19:src/main.c    ****   //UCSRB = (1<<RXEN) | (1<<TXEN) | (1<<RXCIE);
  20:src/main.c    ****   UCSRB = (1<<RXEN) | (1<<RXCIE);
 122               	.LM3:
 123 0004 80E9      		ldi r24,lo8(-112)
 124 0006 8AB9      		out 0xa,r24
  21:src/main.c    ****   /* Set frame format: 8data, 1 stop bit */
  22:src/main.c    ****   UCSRC = (1<<UCSZ0) | (1 << UCSZ1) | (1 << UPM1);
 126               	.LM4:
 127 0008 86E2      		ldi r24,lo8(38)
 128 000a 83B9      		out 0x3,r24
 129 000c 0895      		ret
 131               	.Lscope1:
 133               		.stabd	78,0,0
 136               	.global	USART_Transmit
 138               	USART_Transmit:
 139               		.stabd	46,0,0
  23:src/main.c    **** }
  24:src/main.c    **** void USART_Transmit(unsigned char data )
  25:src/main.c    **** {
 141               	.LM5:
 142               	.LFBB2:
 143               	/* prologue: function */
 144               	/* frame size = 0 */
 145               	/* stack size = 0 */
 146               	.L__stack_usage = 0
 147               	.L3:
  26:src/main.c    ****   /* Wait for empty transmit buffer */
  27:src/main.c    ****   while ( !( UCSRA & (1<<UDRE)) )
 149               	.LM6:
 150 000e 5D9B      		sbis 0xb,5
 151 0010 00C0      		rjmp .L3
  28:src/main.c    ****     ;
  29:src/main.c    ****   /* Put data into buffer, sends the data */
  30:src/main.c    ****   UDR = data;
 153               	.LM7:
 154 0012 8CB9      		out 0xc,r24
 155 0014 0895      		ret
 157               	.Lscope2:
 159               		.stabd	78,0,0
 160               		.section	.text.startup,"ax",@progbits
 162               	.global	main
 164               	main:
 165               		.stabd	46,0,0
  31:src/main.c    **** }
  32:src/main.c    **** 
  33:src/main.c    **** 
  34:src/main.c    **** int main(void){
 167               	.LM8:
 168               	.LFBB3:
 169               	/* prologue: function */
 170               	/* frame size = 0 */
 171               	/* stack size = 0 */
 172               	.L__stack_usage = 0
  35:src/main.c    ****     DDRB |= (1<<0);
 174               	.LM9:
 175 0000 B89A      		sbi 0x17,0
  36:src/main.c    **** 
  37:src/main.c    ****     DDRD |= (1<<3);
 177               	.LM10:
 178 0002 8B9A      		sbi 0x11,3
  38:src/main.c    ****     DDRD |= (1<<4);
 180               	.LM11:
 181 0004 8C9A      		sbi 0x11,4
  39:src/main.c    ****     DDRD |= (1<<5);
 183               	.LM12:
 184 0006 8D9A      		sbi 0x11,5
  40:src/main.c    **** 
  41:src/main.c    ****     DDRB |= (1<<0);
 186               	.LM13:
 187 0008 B89A      		sbi 0x17,0
  42:src/main.c    **** 
  43:src/main.c    ****     GIMSK = 1<<INT0;	
 189               	.LM14:
 190 000a 80E4      		ldi r24,lo8(64)
 191 000c 8BBF      		out 0x3b,r24
  44:src/main.c    ****     MCUCR = 1<<ISC01 | 0<<ISC00;
 193               	.LM15:
 194 000e 82E0      		ldi r24,lo8(2)
 195 0010 85BF      		out 0x35,r24
  45:src/main.c    **** 
  46:src/main.c    ****     TCCR0B &= ~((1<<CS00) | (1<<CS00)); 
 197               	.LM16:
 198 0012 83B7      		in r24,0x33
 199 0014 8E7F      		andi r24,lo8(-2)
 200 0016 83BF      		out 0x33,r24
  47:src/main.c    ****     TIMSK |= 1 << OCIE0B;
 202               	.LM17:
 203 0018 89B7      		in r24,0x39
 204 001a 8460      		ori r24,lo8(4)
 205 001c 89BF      		out 0x39,r24
  48:src/main.c    **** 
  49:src/main.c    ****     USART_Init(MYUBRR);
 207               	.LM18:
 208 001e 87E7      		ldi r24,lo8(119)
 209 0020 90E0      		ldi r25,0
 210 0022 00D0      		rcall USART_Init
  50:src/main.c    **** 
  51:src/main.c    ****     sei();
 212               	.LM19:
 213               	/* #APP */
 214               	 ;  51 "src/main.c" 1
 215 0024 7894      		sei
 216               	 ;  0 "" 2
  52:src/main.c    **** 
  53:src/main.c    ****     PORTD |= (1<<5);
 218               	.LM20:
 219               	/* #NOAPP */
 220 0026 959A      		sbi 0x12,5
  54:src/main.c    ****     PORTD |= (1<<4);
 222               	.LM21:
 223 0028 949A      		sbi 0x12,4
 224               	.L8:
 225               	.LBB4:
 226               	.LBB5:
 228               	.Ltext1:
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 230               	.LM22:
 231 002a 2FEF      		ldi r18,lo8(3686399)
 232 002c 8FE3      		ldi r24,hi8(3686399)
 233 002e 98E3      		ldi r25,hlo8(3686399)
 234 0030 2150      	1:	subi r18,1
 235 0032 8040      		sbci r24,0
 236 0034 9040      		sbci r25,0
 237 0036 01F4      		brne 1b
 238 0038 00C0      		rjmp .
 239 003a 0000      		nop
 240 003c 00C0      		rjmp .L8
 241               	.LBE5:
 242               	.LBE4:
 244               	.Lscope3:
 246               		.stabd	78,0,0
 247               		.text
 249               	.global	__vector_1
 251               	__vector_1:
 252               		.stabd	46,0,0
 254               	.Ltext2:
  55:src/main.c    ****     while (1){
  56:src/main.c    ****         _delay_ms(1000);
  57:src/main.c    ****     }
  58:src/main.c    **** }
  59:src/main.c    **** 
  60:src/main.c    **** ISR(INT0_vect)
  61:src/main.c    **** {
 256               	.LM23:
 257               	.LFBB4:
 258 0016 1F92      		push r1
 259 0018 0F92      		push r0
 260 001a 0FB6      		in r0,__SREG__
 261 001c 0F92      		push r0
 262 001e 1124      		clr __zero_reg__
 263 0020 8F93      		push r24
 264 0022 9F93      		push r25
 265               	/* prologue: Signal */
 266               	/* frame size = 0 */
 267               	/* stack size = 5 */
 268               	.L__stack_usage = 5
  62:src/main.c    ****     if(!state){
 270               	.LM24:
 271 0024 8091 0000 		lds r24,state
 272 0028 9091 0000 		lds r25,state+1
 273 002c 892B      		or r24,r25
 274 002e 01F4      		brne .L9
  63:src/main.c    ****         state=1;
 276               	.LM25:
 277 0030 81E0      		ldi r24,lo8(1)
 278 0032 90E0      		ldi r25,0
 279 0034 9093 0000 		sts state+1,r25
 280 0038 8093 0000 		sts state,r24
  64:src/main.c    **** 
  65:src/main.c    **** 
  66:src/main.c    ****         UCSRB &= ~((1<<RXEN) | (1<<RXCIE));
 282               	.LM26:
 283 003c 8AB1      		in r24,0xa
 284 003e 8F76      		andi r24,lo8(111)
 285 0040 8AB9      		out 0xa,r24
  67:src/main.c    ****         DDRD |= (1<<0);
 287               	.LM27:
 288 0042 889A      		sbi 0x11,0
  68:src/main.c    ****         PORTD |= (1 << 0);
 290               	.LM28:
 291 0044 909A      		sbi 0x12,0
  69:src/main.c    **** 
  70:src/main.c    ****         PORTD |= 1 << 3;
 293               	.LM29:
 294 0046 939A      		sbi 0x12,3
  71:src/main.c    **** 
  72:src/main.c    ****         TCNT0 = 0;
 296               	.LM30:
 297 0048 12BE      		out 0x32,__zero_reg__
  73:src/main.c    ****         TCCR0B |= (0<<CS00) | (0<<CS01) | (1<<CS02); 
 299               	.LM31:
 300 004a 83B7      		in r24,0x33
 301 004c 8460      		ori r24,lo8(4)
 302 004e 83BF      		out 0x33,r24
  74:src/main.c    ****         OCR0B=0x4B;
 304               	.LM32:
 305 0050 8BE4      		ldi r24,lo8(75)
 306 0052 8CBF      		out 0x3c,r24
 307               	.L9:
 308               	/* epilogue start */
  75:src/main.c    ****     }
  76:src/main.c    **** }
 310               	.LM33:
 311 0054 9F91      		pop r25
 312 0056 8F91      		pop r24
 313 0058 0F90      		pop r0
 314 005a 0FBE      		out __SREG__,r0
 315 005c 0F90      		pop r0
 316 005e 1F90      		pop r1
 317 0060 1895      		reti
 319               	.Lscope4:
 321               		.stabd	78,0,0
 323               	.global	__vector_14
 325               	__vector_14:
 326               		.stabd	46,0,0
  77:src/main.c    **** 
  78:src/main.c    **** ISR(TIMER0_COMPB_vect){
 328               	.LM34:
 329               	.LFBB5:
 330 0062 1F92      		push r1
 331 0064 0F92      		push r0
 332 0066 0FB6      		in r0,__SREG__
 333 0068 0F92      		push r0
 334 006a 1124      		clr __zero_reg__
 335 006c 8F93      		push r24
 336               	/* prologue: Signal */
 337               	/* frame size = 0 */
 338               	/* stack size = 4 */
 339               	.L__stack_usage = 4
  79:src/main.c    ****     PORTD &= ~(1 << 3);
 341               	.LM35:
 342 006e 9398      		cbi 0x12,3
  80:src/main.c    **** 
  81:src/main.c    ****     DDRD &= ~(1<<0);
 344               	.LM36:
 345 0070 8898      		cbi 0x11,0
  82:src/main.c    ****     PORTD &= ~(1 << 0);
 347               	.LM37:
 348 0072 9098      		cbi 0x12,0
  83:src/main.c    ****     UCSRB |= (1<<RXEN) | (1<<RXCIE);
 350               	.LM38:
 351 0074 8AB1      		in r24,0xa
 352 0076 8069      		ori r24,lo8(-112)
 353 0078 8AB9      		out 0xa,r24
  84:src/main.c    **** 
  85:src/main.c    ****     TCCR0B &= ~((1<<CS00) | (1<<CS01) | (1<<CS02)); 
 355               	.LM39:
 356 007a 83B7      		in r24,0x33
 357 007c 887F      		andi r24,lo8(-8)
 358 007e 83BF      		out 0x33,r24
  86:src/main.c    ****     state=0;
 360               	.LM40:
 361 0080 1092 0000 		sts state+1,__zero_reg__
 362 0084 1092 0000 		sts state,__zero_reg__
 363               	/* epilogue start */
  87:src/main.c    **** }
 365               	.LM41:
 366 0088 8F91      		pop r24
 367 008a 0F90      		pop r0
 368 008c 0FBE      		out __SREG__,r0
 369 008e 0F90      		pop r0
 370 0090 1F90      		pop r1
 371 0092 1895      		reti
 373               	.Lscope5:
 375               		.stabd	78,0,0
 377               	.global	__vector_7
 379               	__vector_7:
 380               		.stabd	46,0,0
  88:src/main.c    **** 
  89:src/main.c    **** ISR (USART_RX_vect)
  90:src/main.c    **** {
 382               	.LM42:
 383               	.LFBB6:
 384 0094 1F92      		push r1
 385 0096 0F92      		push r0
 386 0098 0FB6      		in r0,__SREG__
 387 009a 0F92      		push r0
 388 009c 1124      		clr __zero_reg__
 389 009e 2F93      		push r18
 390 00a0 3F93      		push r19
 391 00a2 8F93      		push r24
 392 00a4 9F93      		push r25
 393               	/* prologue: Signal */
 394               	/* frame size = 0 */
 395               	/* stack size = 7 */
 396               	.L__stack_usage = 7
  91:src/main.c    ****     uint8_t data = UDR;
 398               	.LM43:
 399 00a6 8CB1      		in r24,0xc
  92:src/main.c    ****     if(connection==0 && data == 0x83){
 401               	.LM44:
 402 00a8 2091 0000 		lds r18,connection
 403 00ac 3091 0000 		lds r19,connection+1
 404 00b0 232B      		or r18,r19
 405 00b2 01F4      		brne .L13
 407               	.LM45:
 408 00b4 8338      		cpi r24,lo8(-125)
 409 00b6 01F4      		brne .L13
  93:src/main.c    ****         PORTD&=~(1<<5);
 411               	.LM46:
 412 00b8 9598      		cbi 0x12,5
  94:src/main.c    ****         connection=1;
 414               	.LM47:
 415 00ba 81E0      		ldi r24,lo8(1)
 416 00bc 90E0      		ldi r25,0
 417 00be 00C0      		rjmp .L18
 418               	.L13:
  95:src/main.c    ****         return;
  96:src/main.c    ****     }
  97:src/main.c    ****     if(connection == 1){
 420               	.LM48:
 421 00c0 2091 0000 		lds r18,connection
 422 00c4 3091 0000 		lds r19,connection+1
 423 00c8 2130      		cpi r18,1
 424 00ca 3105      		cpc r19,__zero_reg__
 425 00cc 01F4      		brne .L15
  98:src/main.c    ****         cmd_val=data;
 427               	.LM49:
 428 00ce 90E0      		ldi r25,0
 429 00d0 9093 0000 		sts cmd_val+1,r25
 430 00d4 8093 0000 		sts cmd_val,r24
  99:src/main.c    ****         connection = 2;
 432               	.LM50:
 433 00d8 82E0      		ldi r24,lo8(2)
 434 00da 90E0      		ldi r25,0
 435               	.L18:
 436 00dc 9093 0000 		sts connection+1,r25
 437 00e0 8093 0000 		sts connection,r24
 100:src/main.c    ****         return;
 439               	.LM51:
 440 00e4 00C0      		rjmp .L12
 441               	.L15:
 101:src/main.c    ****     }
 102:src/main.c    ****     if(connection == 2){
 443               	.LM52:
 444 00e6 2091 0000 		lds r18,connection
 445 00ea 3091 0000 		lds r19,connection+1
 446 00ee 2230      		cpi r18,2
 447 00f0 3105      		cpc r19,__zero_reg__
 448 00f2 01F4      		brne .L16
 103:src/main.c    ****         if(data==0x08){
 450               	.LM53:
 451 00f4 8830      		cpi r24,lo8(8)
 452 00f6 01F4      		brne .L17
 104:src/main.c    ****             PORTB = (PORTB & ~(1<<0))|((cmd_val & 0x1)<<0);
 454               	.LM54:
 455 00f8 28B3      		in r18,0x18
 456 00fa 8091 0000 		lds r24,cmd_val
 457 00fe 9091 0000 		lds r25,cmd_val+1
 458 0102 922F      		mov r25,r18
 459 0104 9E7F      		andi r25,lo8(-2)
 460 0106 8170      		andi r24,lo8(1)
 461 0108 892B      		or r24,r25
 462 010a 88BB      		out 0x18,r24
 105:src/main.c    ****             PORTD = (PORTD & ~(1<<4))|(~(cmd_val & 0x1)<<4);
 464               	.LM55:
 465 010c 22B3      		in r18,0x12
 466 010e 8091 0000 		lds r24,cmd_val
 467 0112 9091 0000 		lds r25,cmd_val+1
 468 0116 8170      		andi r24,1
 469 0118 9927      		clr r25
 470 011a 8095      		com r24
 471 011c 9095      		com r25
 472 011e 34E0      		ldi r19,4
 473               		1:
 474 0120 880F      		lsl r24
 475 0122 991F      		rol r25
 476 0124 3A95      		dec r19
 477 0126 01F4      		brne 1b
 478 0128 922F      		mov r25,r18
 479 012a 9F7E      		andi r25,lo8(-17)
 480 012c 892B      		or r24,r25
 481 012e 82BB      		out 0x12,r24
 482               	.L17:
 106:src/main.c    ****         }
 107:src/main.c    ****         connection = 3;
 484               	.LM56:
 485 0130 83E0      		ldi r24,lo8(3)
 486 0132 90E0      		ldi r25,0
 487 0134 00C0      		rjmp .L18
 488               	.L16:
 108:src/main.c    ****         return;
 109:src/main.c    ****     }
 110:src/main.c    ****     if(connection == 3){
 490               	.LM57:
 491 0136 8091 0000 		lds r24,connection
 492 013a 9091 0000 		lds r25,connection+1
 493 013e 0397      		sbiw r24,3
 494 0140 01F4      		brne .L12
 111:src/main.c    ****         connection=0;
 496               	.LM58:
 497 0142 1092 0000 		sts connection+1,__zero_reg__
 498 0146 1092 0000 		sts connection,__zero_reg__
 112:src/main.c    ****         PORTD|=1<<5;
 500               	.LM59:
 501 014a 959A      		sbi 0x12,5
 502               	.L12:
 503               	/* epilogue start */
 113:src/main.c    ****         return;
 114:src/main.c    ****     }
 115:src/main.c    **** }
 505               	.LM60:
 506 014c 9F91      		pop r25
 507 014e 8F91      		pop r24
 508 0150 3F91      		pop r19
 509 0152 2F91      		pop r18
 510 0154 0F90      		pop r0
 511 0156 0FBE      		out __SREG__,r0
 512 0158 0F90      		pop r0
 513 015a 1F90      		pop r1
 514 015c 1895      		reti
 519               	.Lscope6:
 521               		.stabd	78,0,0
 522               	.global	cmd_val
 523               		.section .bss
 526               	cmd_val:
 527 0000 0000      		.zero	2
 528               	.global	connection
 531               	connection:
 532 0002 0000      		.zero	2
 533               	.global	state
 536               	state:
 537 0004 0000      		.zero	2
 541               		.text
 543               	.Letext0:
 544               		.ident	"GCC: (GNU) 5.4.0"
 545               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cczukem1.s:2      *ABS*:000000000000003d __SP_L__
     /tmp/cczukem1.s:3      *ABS*:000000000000003f __SREG__
     /tmp/cczukem1.s:4      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cczukem1.s:5      *ABS*:0000000000000001 __zero_reg__
     /tmp/cczukem1.s:106    .text:0000000000000000 USART_Init
     /tmp/cczukem1.s:138    .text:000000000000000e USART_Transmit
     /tmp/cczukem1.s:164    .text.startup:0000000000000000 main
     /tmp/cczukem1.s:251    .text:0000000000000016 __vector_1
     /tmp/cczukem1.s:536    .bss:0000000000000004 state
     /tmp/cczukem1.s:325    .text:0000000000000062 __vector_14
     /tmp/cczukem1.s:379    .text:0000000000000094 __vector_7
     /tmp/cczukem1.s:531    .bss:0000000000000002 connection
     /tmp/cczukem1.s:526    .bss:0000000000000000 cmd_val

UNDEFINED SYMBOLS
__do_clear_bss
